

@@@@@@@@@@@@@@@@@@@@@@@@@@@
Kubernetes Deployment:
@@@@@@@@@@@@@@@@@@@@@@@@@@@

Setup Project from local Environment:
-------------------------------------
    gcloud projects create my-k8s-practice-project

    gcloud init

    gcloud config list project
	
    gcloud auth list
	
    gcloud components update
	
Deployment:
-----------

Lab Overview:
**************

•	Provision a Kubernetes cluster using Google Kubernetes Engine.
•	Deploy and manage Docker containers using kubectl.
•	Split an application into microservices using Kubernetes' Deployments and Services.
You use Kubernetes Engine and its Kubernetes API to deploy, manage, and upgrade applications. You use an example application called "app" to complete the labs.
App is hosted on GitHub. It's a 12-Factor application with the following Docker images:
•	Monolith: includes auth and hello services.
•	Auth microservice: generates JWT tokens for authenticated users.
•	Hello microservice: greets authenticated users.
•	nginx: frontend to the auth and hello services.


Project name : my-k8s-practice-project

Project ID :my-k8s-practice-project

Project number :728394386744

Region: us-central1

Zone: us-central1-a



Copy the code from git :
*************************
git clone https://github.com/googlecodelabs/orchestrate-with-kubernetes.git

cd /orchestrate-with-kubernetes/kubernetes

Zone setup:
***********
gcloud config set compute/zone us-central1-a


(Simple from Commandline tool)

Create k8s cluster:
*******************

gcloud container clusters create bootcamp --num-nodes 5 --scopes "https://www.googleapis.com/auth/projecthosting,storage-rw"

Run and deploy a container:
***************************

Run nginx to container:
-----------------------
kubectl run nginx --image=nginx:1.10.0

kubectl get pods

Expose the port and deploy on container:
----------------------------------------
kubectl expose deployment nginx --port 80 --type LoadBalancer

kubectl get services

Set the replicas:
-----------------
kubectl scale deployment nginx --replicas 3

kubectl get pods

kubectl get services

test:
*****
curl http://34.71.116.160:80


Clean Up:
*********
kubectl delete deployment nginx
kubectl delete service nginx




Pods
******

Creating Pods:
**************
kubectl explain pods

cat pods/monolith.yaml

kubectl explain pods.spec.containers


Create the monolith pod using kubectl create:
*********************************************
kubectl create -f pods/monolith.yaml

kubectl get pods

kubectl describe pods monolith


Interacting with pods:
**********************
Run the following command to set up port-forwarding from a local port, 10080, to a pod port, 80 (where your container is listening):
------------------------------------------------------------------------------------------------------------------------------------
kubectl port-forward monolith 10080:80

test:
-----
curl http://127.0.0.1:10080


See what happens when you hit a secure endpoint:
------------------------------------------------
curl -I http://127.0.0.1:10080/secure

Log in to get an auth token from monolith:
------------------------------------------
curl -I -u user http://127.0.0.1:10080/login 
 password
 
Cloud Shell doesn't handle copying long strings well, so copy the token into an environment variable:
-----------------------------------------------------------------------------------------------------
TOKEN=$(curl http://127.0.0.1:10080/login -u user|jq -r '.token')

Access the secure endpoint again:
---------------------------------
curl -H "Authorization: Bearer $TOKEN" http://127.0.0.1:10080/secure

Response: {"message":"Hello"}

view logs for the monolith pod:
-------------------------------
kubectl logs -f monolith

kubectl logs monolith

when you want to troubleshoot from within a container:
------------------------------------------------------
kubectl exec monolith --stdin --tty -c monolith /bin/sh

kubectl exec monolith --stdin --tty -c monolith /bin/sh
/ # ping -c 3 google.com
PING google.com (74.125.124.100): 56 data bytes
64 bytes from 74.125.124.100: seq=0 ttl=51 time=1.040 ms
64 bytes from 74.125.124.100: seq=1 ttl=51 time=1.349 ms
64 bytes from 74.125.124.100: seq=2 ttl=51 time=1.068 ms
--- google.com ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 1.040/1.152/1.349 ms

Monitoring and Health Checks:
*****************************

Creating Pods with Liveness and Readiness Probes:
--------------------------------------------------
cat pods/healthy-monolith.yaml

Create the healthy-monolith pod using kubectl:
----------------------------------------------
kubectl create -f pods/healthy-monolith.yaml


command to view details for the healthy-monolith pod:
-----------------------------------------------------
kubectl describe pod healthy-monolith

Readiness Probes:
-----------------
Use the kubectl port-forward command in terminal 2 to forward a local port to the health port of the healthy-monolith pod:
--------------------------------------------------------------------------------------------------------------------------
kubectl port-forward healthy-monolith 10081:81

Use the curl command in terminal 1 to toggle the readiness probe status:
------------------------------------------------------------------------
curl -I http://127.0.0.1:10081/readiness/status

Get the status of the healthy-monolith pod using the kubectl get pods -w command:
---------------------------------------------------------------------------------
kubectl get pods healthy-monolith -w

kubectl describe pods healthy-monolith

kubectl get pods healthy-monolith

Liveness Probes:
------------------
Use the kubectl port-forward command to forward a local port to the health port of the healthy-monolith pod:
------------------------------------------------------------------------------------------------------------
curl -I http://127.0.0.1:10081/healthz/status

kubectl get pods healthy-monolith -w

kubectl describe pods healthy-monolith

	

Delete kubernetes cluster:
--------------------------
gcloud container clusters delete kubernetes 



35.190.46.249
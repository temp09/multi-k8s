Docker build, run debug and publish:
*************************************


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
       gcloud auth list
    2  gcloud config list project
    3  docker ps
    4  docker run hello-world
    5  docker ps -a
    6  docker images
    7  docker run hello-world
    8  docker images
    9  docker ps -a
   10  docker ps
   11  mkdir test
   12  cd test/
   13  ls
   14  vi Dockerfile
   15  vi app.js
   16  docker build -t node-app:0.1 .
   17  docker images
   18  docker run -p 4000:80 --name my-app node-app:0.1
   19  docker stop my-app
   20  docker images
   21  ls
   22  docker ps
   23  docker ps -a
   24  docker rm my-app
   25  docker run -p 4000:80 --name my-app -d node-app:0.1
   26  docker ps -a
   27  curl http://localhost:4000
   28  docket logs e380
   29  docker logs e380
   30  vi app.js
   31  docker build -t node-app:0.2 .
   32  docker ps -a
   33  docker run -p 8080:80 --name my-app-1 -d node-app:0.2
   34  docker ps -a
   35  curl http://localhost:4000
   36  curl http://localhost:8080
   37  docker logs d73
   38  docker exec -it d73 bash
   39  docker inspect d73
   40  docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' d73
   41  docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' c37
   42  docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' c38
   43  docker tag node-app:0.2 gcr.io/qwiklabs-gcp-00-d7cbe7d79939/node-app:0.2
   44  docker images
   45  docker push gcr.io/qwiklabs-gcp-00-d7cbe7d79939/node-app:0.2
   46  docker stop $(docker ps -q)
   47  docker rm $(docker ps -aq)
   48  docker rmi node-app:0.2 gcr.io/qwiklabs-gcp-00-d7cbe7d79939/node-app:0.2
   49  docker rmi node:6
   50  docker rmi $(docker images -aq) # remove remaining images
   51  docker rmi $(docker images -aq)
   52  docker images
   53  docker pull gcr.io/qwiklabs-gcp-00-d7cbe7d79939/node-app:0.2
   54  docker run -p 4000:80 -d gcr.io/qwiklabs-gcp-00-d7cbe7d79939/node-app:0.2
   55  curl http://localhost:4000

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



Project Info:
-------------
list active account: " gcloud auth list "
list the project ID: " gcloud config list project "


Create a container and run hello-world container:
-------------------------------------------------

 " docker run hello-world "
 " docker images "
 " docker run hello-world "
 
1. Get the list of container running:
 
 " docker ps -a "
 
2.Run the container with custom name:
 
 " docker run --name [container-name] hello-world "
 " docker run --name v_1.0 hello-world "
 
 
 
Build a Docker images:
----------------------  

mkdir test && cd test

1. create DockerFile :

 " cat > Dockerfile <<EOF
# Use an official Node runtime as the parent image
FROM node:6

# Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Make the container's port 80 available to the outside world
EXPOSE 80

# Run app.js using node when the container launches
CMD ["node", "app.js"]
EOF "

2. write the node application:

" cat > app.js <<EOF
const http = require('http');

const hostname = '0.0.0.0';
const port = 80;

const server = http.createServer((req, res) => {
    res.statusCode = 200;
      res.setHeader('Content-Type', 'text/plain');
        res.end('Hello World\n');
});

server.listen(port, hostname, () => {
    console.log('Server running at http://%s:%s/', hostname, port);
});

process.on('SIGINT', function() {
    console.log('Caught interrupt signal and will exit');
    process.exit();
});
EOF " 


3. build image command:

   " docker build -t node-app:0.1 . "
   " docker images "


Run containers based on the image:
----------------------------------

  " docker run -p 4000:80 --name my-app node-app:0.1 " 
  
  ( The --name flag allows you to name the container if you like.
    The -p instructs Docker to map the host's port 4000 to the container's port 80.
	Now you can reach the server at http://localhost:4000. 
	Without port mapping, you would not be able to reach the container at localhost.)
	
Run the container images in backgroud:
--------------------------------------

  " docker run -p 4000:80 --name my-app -d node-app:0.1 "

docker ps
	
Test:
------

curl http://localhost:4000
Response:  Hello World


Close the initial terminal and then run the following command to stop and remove the container:
------------------------------------------------------------------------------------------------

  " docker stop my-app && docker rm my-app "
  
Start the container in the background:
---------------------------------------
  " docker run -p 4000:80 --name my-app -d node-app:0.1 "

  " docker ps "
  
Check the logs:
---------------

  " docker logs conatiner_id "
  
Quick building another image and run on container:
-------------------------------------------------

  " docker build -t node-app:0.2 . "
  " docker run -p 8080:80 --name my-app-2 -d node-app:0.2 "
  " docker ps "
  
Test for 2nd container:
-----------------------

curl http://localhost:8080
Response:  Welcome to cloud


Debug :
---------

docker logs -f [container_id]

1. Use interactive shell to go to inside the container:

  " docker exec -it [container_id] bash "
  
2. Examine a container's metadata in Docker:

  " docker inspect ca "
  " docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ca "
  
  
Publish or push your images to container registry:
---------------------------------------------------

1. get the project ID : " gcloud config list project "

2. Tag your app : " docker tag node-app:0.2 gcr.io/my-k8-project-273116/node-app:0.2 "

3. Push images to Registry: " docker push gcr.io/my-k8-project-273116/node-app:0.2 "


Stop and remove all containers:
-------------------------------

	docker stop $(docker ps -q)
	docker rm $(docker ps -aq)

1. Remove the child images:
   docker rmi node-app:0.2 gcr.io/my-k8-project-273116/node-app node-app:0.1
   docker rmi node:6
   docker rmi $(docker images -aq) # remove remaining images
   docker images



Pull the image and run:
--------------------------

docker pull gcr.io/my-k8-project-273116/node-app:0.2

docker run -p 4000:80 -d gcr.io/my-k8-project-273116/node-app:0.2

curl http://localhost:4000



Simple demo about Loadbl setting:
--------------------------------------------

A.Setup default zone and region:
------------------------------
	gcloud config set compute/zone us-central1-a
	gcloud config set compute/region us-central1

B. Create multiple web-server instances:
----------------------------------------

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

C. Create an instance template by using startup scripts:
--------------------------------------------------------
    gcloud compute instance-templates create nginx-template --metadata-from-file startup-script=startup.sh

D. Create target pool and managed instance group:
-------------------------------------------------
      gcloud compute target-pools create nginx-pool
      gcloud compute instance-groups managed create nginx-group --base-instance-name nginx --size 2 --template nginx-template --target-pool nginx-pool
      gcloud compute instances list
	  
E. Create firewall rules to allow traffic ( tcp/80):
-----------------------------------------------------
      gcloud compute firewall-rules create www-firewall --allow tcp:80

	
F. Create network Load balancer:
---------------------------------
    gcloud compute forwarding-rules create nginx-lb --region us-central1  --ports=80 --target-pool nginx-pool
    gcloud compute forwarding-rules list

################################
	Create HTTP load balancer:
################################
G. Create health check:
------------------------
    gcloud compute http-health-checks create http-basic-check
	
H.Create a backend service and attach the manged instance group:
-----------------------------------------------------------------
    gcloud compute instance-groups managed set-named-ports nginx-group --named-ports http:80
    gcloud compute backend-services create nginx-backend --protocol HTTP --http-health-checks http-basic-check --global
    gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group --instance-group-zone us-central1-a --global
	
I. Create a URL map and target HTTP proxy to route requests to your URL map:
----------------------------------------------------------------------------
  gcloud compute url-maps create web-map --default-service nginx-backend
  gcloud compute target-http-proxies create http-lb-proxy --url-map web-map
  
J. Create a forwarding rule:
----------------------------- 
    gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80
    gcloud compute forwarding-rules list


All comands :
-----------------
Tasks1:
@@@@@@@

gcloud beta compute --project=my-k8-project-273116 instances create nucleus-jumphost --zone=us-central1-a --machine-type=f1-micro --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=288844477966-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=http-server --image=debian-9-stretch-v20200309 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard --boot-disk-device-name=nucleus-jumphost --reservation-affinity=any


Tasks2:
@@@@@@@@
git clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples
cd kubernetes-engine-samples/hello-app
export PROJECT_ID=my-k8-project-273116


docker build -t gcr.io/${PROJECT_ID}/hello-app:2.0 .
docker images


gcloud auth configure-docker
docker push gcr.io/${PROJECT_ID}/hello-app:2.0
gcloud config set project $PROJECT_ID
gcloud config set compute/zone us-central1-a
gcloud container clusters create hello-cluster --num-nodes=3
gcloud container clusters get-credentials hello-cluster

kubectl create deployment hello-web --image=gcr.io/${PROJECT_ID}/hello-app:2.0
kubectl get pods
kubectl get services


kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080
kubectl get services


Tasks3:
@@@@@@@@
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

    gcloud compute instance-templates create nginx-template --metadata-from-file startup-script=startup.sh
	
    gcloud compute target-pools create nginx-pool
    gcloud compute instances list
	
    gcloud compute instance-groups managed create nginx-group --base-instance-name nginx --size 2 --template nginx-template --target-pool nginx-pool
    gcloud compute instances list
	
    gcloud compute firewall-rules create www-firewall --allow tcp:80
	
    gcloud compute http-health-checks create http-basic-check
    gcloud compute instance-groups managed set-named-ports nginx-group --named-ports http:80
	
    gcloud compute backend-services create nginx-backend --protocol HTTP --http-health-checks http-basic-check --global
    gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group --instance-group-zone us-central1-a --global
    gcloud compute url-maps create web-map --default-service nginx-backend
	
    gcloud compute target-http-proxies create http-lb-proxy --url-map web-map
    gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80
    gcloud compute forwarding-rules list


	
Details Work for the lab:
##########################

A.Setup default zone and region:
------------------------------
	gcloud config set compute/zone us-central1-a
	gcloud config set compute/region us-central1
	
	
Task 1: Create a project jumphost instance:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

gcloud beta compute --project=my-k8-project-273116 instances create nucleus-jumphost --zone=us-central1-a --machine-type=f1-micro --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=288844477966-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=debian-9-stretch-v20200309 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard --boot-disk-device-name=nucleus-jumphost --reservation-affinity=any
gcloud beta compute --project=my-k8-project-273116 instances create nucleus-jumphost --zone=us-central1-a --machine-type=f1-micro --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=288844477966-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=http-server --image=debian-9-stretch-v20200309 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard --boot-disk-device-name=nucleus-jumphost --reservation-affinity=any


Task 2: Create a Kubernetes service cluster:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Step 1: Build the container image:
----------------------------------

git clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples

cd kubernetes-engine-samples/hello-app

export PROJECT_ID=qwiklabs-gcp-00-dccff9681428

docker build -t gcr.io/${PROJECT_ID}/hello-app:2.0 .

docker images



Step 2: Upload the container image:
-----------------------------------

gcloud auth configure-docker

docker push gcr.io/${PROJECT_ID}/hello-app:2.0



Step 3: Run your container locally (optional)Optional:
------------------------------------------------------

 "docker run --rm -p 8080:8080 gcr.io/${PROJECT_ID}/hello-app:2.0" 
 
  test: "curl http://localhost:8080"
  


Step 4: Create a container cluster:
-----------------------------------

gcloud config set project $PROJECT_ID

gcloud config set compute/zone us-east1-b

gcloud container clusters create hello-cluster --num-nodes=3

gcloud compute instances list

gcloud container clusters get-credentials hello-cluster



Step 5: Deploy your application:
--------------------------------

kubectl create deployment hello-web --image=gcr.io/${PROJECT_ID}/hello-app:2.0

kubectl get pods



Step 6: Expose your application to the Internet (Expose the app on port 8080):
----------------------------------------------------------------------------------

kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080


Step 7: Scale up your application:
----------------------------------

kubectl scale deployment hello-web --replicas=3

kubectl get deployment hello-web

kubectl get pods



Step 8: Deploy a new version of your app:
-----------------------------------------

Note: need to change you src code if you want new version of your app

docker build -t gcr.io/${PROJECT_ID}/hello-app:3.0 .

docker push gcr.io/${PROJECT_ID}/hello-app:3.0

kubectl set image deployment/hello-web hello-app=gcr.io/${PROJECT_ID}/hello-app:3.0


Cleaning Up:
--------------


kubectl delete service hello-web

gcloud container clusters delete hello-cluster



















@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

create cluster:
---------------
   gcloud container clusters create nucleus-cluster
   
Get authentication credentials for the cluster:
-----------------------------------------------

   gcloud container clusters get-credentials nucleus-cluster
   
Deploying an application to the cluster:
----------------------------------------

   kubectl create deployment hello-server --image=gcr.io/google-samples/hello-app:2.0
   
Expose the app on port 8080:
-----------------------------
    kubectl expose deployment hello-server --type=LoadBalancer --port 8080
	
	

docker pull gcr.io/google-samples/hello-app:2.0

docker image push gcr.io/qwiklabs-gcp-02-73eb2e48e860/hello-app:2.0

docker run -p 8080:80 -d gcr.io/google-samples/hello-app:2.0

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




B. Create multiple web-server instances:
----------------------------------------
startup scripts:
----------------
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

C. Create an instance template by using startup scripts:
--------------------------------------------------------
    gcloud compute instance-templates create nginx-template --metadata-from-file startup-script=startup.sh

D. Create target pool and managed instance group:
-------------------------------------------------
      gcloud compute target-pools create nginx-pool
      gcloud compute instance-groups managed create nginx-group --base-instance-name nginx --size 2 --template nginx-template --target-pool nginx-pool
      gcloud compute instances list
	  
E. Create firewall rules to allow traffic ( tcp/80):
-----------------------------------------------------
      gcloud compute firewall-rules create www-firewall --allow tcp:80

	
F. Create network Load balancer:
---------------------------------
    gcloud compute forwarding-rules create nginx-lb --region us-central1  --ports=80 --target-pool nginx-pool
    gcloud compute forwarding-rules list

################################
	Create HTTP load balancer:
################################
G. Create health check:
------------------------
    gcloud compute http-health-checks create http-basic-check
	
H.Create a backend service and attach the manged instance group:
-----------------------------------------------------------------
    gcloud compute instance-groups managed set-named-ports nginx-group --named-ports http:80
    gcloud compute backend-services create nginx-backend --protocol HTTP --http-health-checks http-basic-check --global
    gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group --instance-group-zone us-east1-b --global
	
I. Create a URL map and target HTTP proxy to route requests to your URL map:
----------------------------------------------------------------------------
  gcloud compute url-maps create web-map --default-service nginx-backend
  gcloud compute target-http-proxies create http-lb-proxy --url-map web-map
  
J. Create a forwarding rule:
----------------------------- 
    gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80
    gcloud compute forwarding-rules list
	
	
	
	
DONE:
-----------

git clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples
    2  cd kubernetes-engine-samples/hello-app
    3  ls
    4  export PROJECT_ID=qwiklabs-gcp-00-dccff9681428
    5  docker build -t gcr.io/${PROJECT_ID}/hello-app:2.0 .
    6  docker images
    7  gcloud auth configure-docker
    8  docker push gcr.io/${PROJECT_ID}/hello-app:2.0
    9  gcloud config set project $PROJECT_ID
   10  gcloud config set compute/zone us-east1-b
   11  gcloud container clusters create hello-cluster --num-nodes=3
   12  gcloud compute instances list
   13  gcloud container clusters get-credentials hello-cluster
   14  kubectl get pods
   15  kubectl get services
   16  kubectl create deployment hello-web --image=gcr.io/${PROJECT_ID}/hello-app:2.0
   17  kubectl get pods
   18  kubectl get services
   19  kubectl expose deployment hello-web --type=LoadBalancer --port 80 --target-port 8080
   20  cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF
   21  gcloud compute instance-templates create nginx-template --metadata-from-file startup-script=startup.sh
   22  gcloud compute target-pools create nginx-pool
   23  gcloud compute instance-groups managed create nginx-group --base-instance-name nginx --size 2 --template nginx-template --target-pool nginx-pool
   24  gcloud compute instances list
   25  gcloud compute firewall-rules create www-firewall --allow tcp:80
   26  gcloud compute forwarding-rules create nginx-lb --region us-central1  --ports=80 --target-pool nginx-pool
   27  gcloud compute forwarding-rules create nginx-lb --region us-east1  --ports=80 --target-pool nginx-pool
   28  gcloud compute forwarding-rules list
   29  gcloud compute http-health-checks create http-basic-check
   30  gcloud compute instance-groups managed set-named-ports nginx-group --named-ports http:80
   31  gcloud compute backend-services create nginx-backend --protocol HTTP --http-health-checks http-basic-check --global
   32  gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group --instance-group-zone us-east1-b --global
   33  gcloud compute url-maps create web-map --default-service nginx-backend
   34  gcloud compute target-http-proxies create http-lb-proxy --url-map web-map
   35  gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80
   36  gcloud compute forwarding-rules list
   37  kubectl get services
   38  gcloud get pods
   39  kubectl get pods
   
   ____________________________________________________________________________________
	
	Platform Engineering - Middleware
	
	Platform Operations Commercial Inbound
	
	Platform Operations/Deployments Tier 2 Interactive Services
	
	Prod Grp D (Thu 2300 - Fri 0500 CT)
	
	
	
	gcloud beta compute --project=my-new-project-271214 instances create instance-1 --zone=us-central1-a --machine-type=n1-standard-4 --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=203198323389-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --tags=http-server --image=rhel-7-v20200403 --image-project=rhel-cloud --boot-disk-size=100GB --boot-disk-type=pd-standard --boot-disk-device-name=instance-1 --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
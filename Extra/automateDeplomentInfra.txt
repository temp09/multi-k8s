@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Automate Deployment Infrastructures by using Deployment-Manager:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Create a configuration for an auto mode network
Create a configuration for a firewall rule
Create a module for VM instances
Create and deploy a configuration
Verify the deployment of a configuration


Setup Project from local Environment:
-------------------------------------
    gcloud projects create my-infra-deployment-project

    gcloud init

    gcloud config list project
	
    gcloud auth list
	
    gcloud components update


Use cloud shell create the deployment:
***************************************
Create folder under the project:
--------------------------------
	mkdir dminfra
	cd dminfra
Get the list of network/firewall/instance availability:
--------------------------------------------------------

    gcloud deployment-manager types list | grep network
    gcloud deployment-manager types list | grep firewall
    gcloud deployment-manager types list | grep instance
	
Create deployment by using configurations template yaml files:
---------------------------------------------------------------
    gcloud deployment-manager deployments delete dminfra
    gcloud deployment-manager deployments create dminfra --config=config.yaml --preview
    gcloud deployment-manager deployments update dminfra
	
	
config.yaml
------------

imports:
- path: instance-template.jinja
resources:
# Create the auto-mode network
- name: mynetwork
  type: compute.v1.network
  properties:
    autoCreateSubnetworks: true

# Create the firewall rule
- name: mynetwork-allow-http-ssh-rdp-icmp
  type: compute.v1.firewall
  properties:
      network: $(ref.mynetwork.selfLink)
      sourceRanges: ["0.0.0.0/0"]
      allowed:
      - IPProtocol: TCP
        ports: [22, 80, 3389]
      - IPProtocol: ICMP
	  
# Create the mynet-us-vm instance
- name: mynet-us-vm
  type: instance-template.jinja
  properties:
    zone: us-central1-a
    machineType: n1-standard-1
    network: $(ref.mynetwork.selfLink)
    subnetwork: regions/us-central1/subnetworks/mynetwork
# Create the mynet-eu-vm instance
- name: mynet-eu-vm
  type: instance-template.jinja
  properties:
    zone: europe-west1-d
    machineType: n1-standard-1
    network: $(ref.mynetwork.selfLink)  
    subnetwork: regions/europe-west1/subnetworks/mynetwork
	  
	  
instance-template.jinja:
------------------------

resources:
- name: {{ env["name"] }}
  type: compute.v1.instance
  properties:
         machineType: zones/{{ properties["zone"] }}/machineTypes/{{ properties["machineType"] }}
         zone: {{ properties["zone"] }}
         networkInterfaces:
          - network: {{ properties["network"] }}
            subnetwork: {{ properties["subnetwork"] }}
            accessConfigs:
            - name: External NAT
              type: ONE_TO_ONE_NAT
         disks:
          - deviceName: {{ env["name"] }}
            type: PERSISTENT
            boot: true
            autoDelete: true
            initializeParams:
              sourceImage: https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9
			  
			  


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Automate Deployment Infrastructures by using terraform:
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Create a configuration for an auto mode network
Create a configuration for a firewall rule
Create a module for VM instances
Create and deploy a configuration
Verify the deployment of a configuration


Set up Terraform and Cloud Shell:
***************************************

Open the cloud shell and run " terraform --version "

Create folder under the project:
--------------------------------
	mkdir tfinfra
	cd tfinfra
	
	
	
Create provider.tf file:
-------------------------

put  " provider "google" {} " on the provider.tf file 

Initialize terraform:
---------------------

cd tfinfra
terraform init


Create network and resource:
----------------------------
 
create mynetwork.tf file and put the information on it

# Create the mynetwork network
resource "google_compute_network" "mynetwork" {
name                    = "mynetwork"
auto_create_subnetworks = true
}

Configure the firewalls rules:
-------------------------------

Put the firewalls info on mynetwork.tf file

# Add a firewall rule to allow HTTP, SSH, RDP, and ICMP traffic on mynetwork
resource "google_compute_firewall" "mynetwork-allow-http-ssh-rdp-icmp" {
name = "mynetwork-allow-http-ssh-rdp-icmp"
network = google_compute_network.mynetwork.self_link
allow {
    protocol = "tcp"
    ports    = ["22", "80", "3389"]
    }
allow {
    protocol = "icmp"
    }
}

Configure the VM insanaces:
----------------------------

Ctreate folder instance under the folder tfinfra 

Create new file under instace folder and named it main.tf and add the following code on it

variable "instance_name" {}
variable "instance_zone" {}
variable "instance_type" {
  default = "n1-standard-1"
  }
variable "instance_subnetwork" {}

resource "google_compute_instance" "vm_instance" {
  name         = "${var.instance_name}"
  zone         = "${var.instance_zone}"
  machine_type = "${var.instance_type}"
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
      }
  }
  network_interface {
    subnetwork = "${var.instance_subnetwork}"
    access_config {
      # Allocate a one-to-one NAT IP to the instance
    }
  }
}


Add the following VM instances under the mynetwork.tf file 

# Create the mynet-us-vm instance
module "mynet-us-vm" {
  source           = "./instance"
  instance_name    = "mynet-us-vm"
  instance_zone    = "us-central1-a"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

# Create the mynet-eu-vm" instance
module "mynet-eu-vm" {
  source           = "./instance"
  instance_name    = "mynet-eu-vm"
  instance_zone    = "europe-west1-d"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

Creating netwrok and resources:
--------------------------------

To rewrite the terraform config file:
terraform fmt

initialize:
terraform init

execution plan:
terraform plan

Appply the changes:
terraform apply

yes

provider.tf
-------------
provider "google" {}


mynetwork.tf
---------------

# Create the mynetwork network
resource "google_compute_network" "mynetwork" {
  name                    = "mynetwork"
  auto_create_subnetworks = true
}
# Add a firewall rule to allow HTTP, SSH, RDP, and ICMP traffic on mynetwork
resource "google_compute_firewall" "mynetwork-allow-http-ssh-rdp-icmp" {
  name    = "mynetwork-allow-http-ssh-rdp-icmp"
  network = google_compute_network.mynetwork.self_link
  allow {
    protocol = "tcp"
    ports    = ["22", "80", "3389"]
  }
  allow {
    protocol = "icmp"
  }
}
# Create the mynet-us-vm instance
module "mynet-us-vm" {
  source              = "./instance"
  instance_name       = "mynet-us-vm"
  instance_zone       = "us-central1-a"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

# Create the mynet-eu-vm" instance
module "mynet-eu-vm" {
  source              = "./instance"
  instance_name       = "mynet-eu-vm"
  instance_zone       = "europe-west1-d"
  instance_subnetwork = google_compute_network.mynetwork.self_link
}

main.tf
-------

variable "instance_name" {}
variable "instance_zone" {}
variable "instance_type" {
  default = "n1-standard-1"
  }
variable "instance_subnetwork" {}

resource "google_compute_instance" "vm_instance" {
  name         = "${var.instance_name}"
  zone         = "${var.instance_zone}"
  machine_type = "${var.instance_type}"
  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
      }
  }
  network_interface {
    subnetwork = "${var.instance_subnetwork}"
    access_config {
      # Allocate a one-to-one NAT IP to the instance
    }
  }
}



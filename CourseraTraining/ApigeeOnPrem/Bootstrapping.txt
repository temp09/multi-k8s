Hello. In this lesson, we are going to talk about bootstrapping the Apigee platform. At this point, the installation topology is complete. Infrastructure has been provisioned and prerequisites are in place. It's time to bootstrap the hosts in your cluster. Bootstrapping is the term we use for the first step of the installation process. To bootstrap, you will download and run a script from the Apigee software repository. The script will configure your system to talk to the Apigee software repository you specify. It will also install common base utilities that all Apigee hosts require in order to complete the rest of the installation process. It is during the bootstrapping process that you configure each host to communicate with the default repository at software.apigee.com, your local network mirror of that repository, or a file system location. With our installation topology in mind, let's begin the bootstrapping process. The first step in the process is to download the bootstrap script from the desired repository. For this demo, we'll be using the repository hosted by Apigee at software.apigee.com. In your environment, you may be pulling the script from your local mirror. If you are using the tarballs software distribution method, the bootstrap script will already be available in your local file system at the location to which you decompressed the tarball. Here, we're downloading the bootstrap script to /temp/apigee using the Kernel command. Note the version string embedded in the filename. Each release has its own bootstrap script, so be sure to download the right script for your desired release. We'll discuss the Apigee Edge for private cloud release cadence and versioning in a later course. The next step is to execute the bootstrap script. You can either make the script executable or prefix the script path with bash as shown here. Arguments to the script vary, but if you're using the Apigee hosted repository at software.apigee.com, you'll need to provide at least the Apigee user argument. You can also pass in the Apigee password argument on the command line for non-interactive use. But in this example, we'll just let the script prompt us for the correct password. There are some other arguments you may wish to use if you are hosting your own repository mirror or tarball. For instance, the Apigee protocol argument can be set to http:// or file:// if you are not using the default TLS-encrypted http connection. The Apigee repo host argument is useful if you are using a local mirror of the repository. The bootstrap script stopped here because it does not detect a valid JDK on the system. As discussed in the prerequisites lesson, a supported JDK is required for the installation to succeed. If I had already installed a supported JDK and the bootstrap script was able to locate it based on the path or Java home variables, I wouldn't be prompted. In this case, I'll just tell the script to install the open JDK from my distributor repository. With the open JDK installation complete, the bootstrap script stores the Java home location and the Apigee local configuration and exits. The final step in the bootstrapping process is to install the Apigee setup utility. This utility is not automatically installed by the bootstrap script, but it is required to drive the remainder of the installation. To install the utility, run Apigee service, Apigee setup, install. At this point, we have successfully bootstrapped the first host in the cluster. The same bootstrapping process can be completed across all other hosts at this time before we continue on with other parts of the installation. If you are following along in your own cluster, you will now see a number of directories in /opt/apigee. These directories contain the basic structure needed to support an Apigee installation as well as a number of base utilities required by higher level services. In a later module, we will explore the file system structure in detail. For more information on this topic, refer to our documentation. If you have any questions, please post them on our community. Thanks for watching.
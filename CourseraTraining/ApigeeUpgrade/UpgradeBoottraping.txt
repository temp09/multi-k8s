Hello. In this lesson, we are going to talk about Bootstrapping the Apigee platform to prepare for an upgrade. With our planning and preparation for the upgrade out of the way, it's time to start with the upgrade. We will begin with the bootstrapping process. The bootstrapping process for upgrading Apigee is identical to the process we used during the installation. Bootstrapping always configures a host to point to a specific major release of Apigee. To point to a new version, you will simply bootstrap again using the correct script for your desired release. As before, the bootstrap script will configure the Apigee software repository, so be sure to parse in the same arguments you used in installation time, if you're using a local repository mirror or tarball. Let's see the bootstrapping process in action. We start by downloading the bootstrap script from the desired repository. For this demo, we will be using the repository hosted by Apigee at software.apigee.com. In your environment, you may be pulling the script from your local network repository mirror. If you are using the tarball software distribution method, the bootstrap script will already be available on your local file system at the location to which you decompress the tarball. Here, were downloading the bootstrap script to /temp/apigee using the curl command. Note the version string embedded in the file name. Each release has its own bootstrap script. So, be sure to download the right script for your desired release. The next step is to execute the bootstrap script. You can either make the script executable or prefix the script path with bash as shown here. Arguments to the script vary, but if you're using the Apigee hosted repository at software.apigee.com, you'll need to provide at least the Apigee user argument. You can also parse in the Apigee password argument on the command line for non interactive use, but in this example, let's just let the script prompt us for the correct password. There are some other arguments you may wish to use if you are hosting your own repository mirror or tarball. For instance, the Apigee protocol argument can be set to HTTP colon slash slash or file colon slash slash, if you are not using the default TLS encrypted HTTP connection. The Apigee repo host argument is useful if you are using a local mirror of the repository. When we perform the initial installation, we finish the bootstrapping process by installing the Apigee setup utility. When the host is bootstrapped again during the upgrade process, that utility will need to be upgraded before proceeding with the rest of the upgrade. To upgrade it run apigee-service, apigee-setup update. Finally, the organization provisioning and post installation validation utilities we install during the installation process need to be upgraded. These utilities will generally only exist on one management server, but they should be upgraded anywhere that they're installed. To upgrade the organization provisioning utility run apigee-service, apigee-provision update. To upgrade the validation utility run apigee-service, apigee-validate update. At this point, we have successfully bootstrapped our first host in the cluster to the new version of the Apigee software repository. The same bootstrapping process can be completed across all other hosts at this time before we continue on with other parts of the upgrade. For more information on this topic, refer to our documentation. If you have any questions, please post them on our community. Thanks for watching.
Cloud Build:
*************


Task 1: Confirm that needed APIs are enabled: 
----------------------------------------------

google conatiner registry API , Cloud Build API

Task 2. Building Containers with DockerFile and Cloud Build
------------------------------------------------------------
    nano quickstart.sh
    nano Dockerfile
    ls
    chmod +x quickstart.sh
    echo ${GOOGLE_CLOUD_PROJECT}
    gcloud builds submit --tag gcr.io/${GOOGLE_CLOUD_PROJECT}/quickstart-image .
	
Task 3. Building Containers with a build configuration file and Cloud Build
----------------------------------------------------------------------------
    git clone https://github.com/GoogleCloudPlatform/training-data-analyst
    ln -s ~/training-data-analyst/courses/ak8s/v1.1 ~/ak8s
    cd ~/ak8s/Cloud_Build/a
   ls
   cat cloudbuild.yaml
   gcloud builds submit --config cloudbuild.yaml .
   
Task 4. Building and Testing Containers with a build configuration file and Cloud Build
----------------------------------------------------------------------------------------
   cd ~/ak8s/Cloud_Build/b
   cat cloudbuild.yaml
   gcloud builds submit --config cloudbuild.yaml .
   echo $?
   
   
   
 
 
 
---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "nginx-1"
  namespace: "default"
  labels:
    app: "nginx-1"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "nginx-1"
  template:
    metadata:
      labels:
        app: "nginx-1"
    spec:
      containers:
      - name: "nginx-1"
        image: "nginx:latest"
---
apiVersion: "autoscaling/v2beta1"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "nginx-1-hpa-umnl"
  namespace: "default"
  labels:
    app: "nginx-1"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "nginx-1"
    apiVersion: "apps/v1"
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: "Resource"
    resource:
      name: "cpu"
      targetAverageUtilization: 80

	  
	  
	  
	  apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2020-04-17T21:42:21Z"
  generation: 1
  labels:
    app: nginx-1
  name: nginx-1
  namespace: default
  resourceVersion: "2358"
  selfLink: /apis/apps/v1/namespaces/default/deployments/nginx-1
  uid: 5191414e-80f4-11ea-89c1-42010a80020f
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx-1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx-1
    spec:
      containers:
      - image: nginx:latest
        imagePullPolicy: Always
        name: nginx-1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 3
  conditions:
  - lastTransitionTime: "2020-04-17T21:42:29Z"
    lastUpdateTime: "2020-04-17T21:42:29Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2020-04-17T21:42:21Z"
    lastUpdateTime: "2020-04-17T21:42:29Z"
    message: ReplicaSet "nginx-1-75467f57c" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 3
  replicas: 3
  updatedReplicas: 3
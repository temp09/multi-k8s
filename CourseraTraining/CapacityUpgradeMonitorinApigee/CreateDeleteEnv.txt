Hello, and welcome to Edge Capacity Expansion, create and delete Environment. In this video, we'll be covering the following topics: Environment naming convention, Creating an Environment, Environment scope, Associating Message Processor to Environments, Disassociating Message Processor from Environments and finally, how to delete an Environment. When naming environments, the name must be unique within the organization. Names must be lowercase only and contain no special characters, spaces, periods or underscores. As with organizations, if multiple words are required, then they should be joined with a dash. When creating a new environment, the easiest way is to use the Apigee service provision command. In the example, you can see that we use the command with the format Apigee server, Apigee provision add-env, and then provide the path to the configuration file. You can see in the sample file that we provide the Apigee sysadmin password, the name of the organization the environment should be associated with, the name for the new environment, the port, the name of the virtual host to be created. Remember that the combination of virtual host name and port should be unique. And finally, a virtual host alias or list of aliases the virtual host should solve traffic for. As always being an API focused company, you can instead choose to create your new environment using API calls. Full documentation for the API calls is given in the link shown here. Next, we'll talk about scope and how its affects message processors and environments. An environment defines a logical processing scope. Message processors can be associated with one or multiple environments. Routers however, are multi-tenant aware. Meaning they're capable of sending traffic to any MP given the current scope. Let's walk through three typical scenarios. In this first example, we have a single organization containing a single environment. All routers send traffic to all message processors. In the second example, we again have a single organization but this time, it contains two environments. The message processors here have been associated with both environments. In the final example, we can see that two message processors have been associated with Env A and two with Env B. The message processors for Env A will never process traffic destined for Env B, and vice versa. This ability to associate message processors with different environments allows for good partitioning of resource. For example, you may have a sandbox and production environment sitting with the same organization. To ensure that one doesn't impact the other, separate pools of message processors can be associated with each environment. To associate a message processor with an environment, we need to find UUID. To get the UUID, we make a call to the message processors server API, which responds on port 8082. Once we have the UUID, we make a second API call this time to the management API, but we specify the organization environment we want the message processor to be associated with. You can see on the screen, we parsed the action add and the UUID to be added. If you're decommissioning or moving resources, you may need to disassociate a message processor from an environment. Firstly, you can obtain a list of all server UUIDs by making the call shown, and substituting in your organization and environment name. For each UUID returned, if it matches one of the message processor you wish to remove, then use that UUID with the second API call to disassociate it from the environment. Finally, we come into deleting an environment. Before deleting an environment, we must remove any objects or servers associated with it. We've already seen how to remove servers. So, assuming we have disassociated our servers, next, we delete any keystores defined for the environment. The first call shown returns a list of keystores, [inaudible] keystore name returned. The second call must be made to delete it. Next, we delete the virtual hosts following the same pattern as for keystores. First, we obtain a list of virtual hosts defined for the environment using the first call. And then using the second call, we delete each one individually. Finally, when we have no objects defined or servers associated, we can delete the environment itself by making another API call to the management API. This concludes creating and deleting an environment. For more information, you can visit docs.apigee.com. And to get involved in the community, please go to community.apigee.com. Thank you.
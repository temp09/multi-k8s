Hello and welcome to Edge Capacity Expansion, Create and delete an Organization. In this video, we will cover the following topics: multitenancy, organization naming convention, onboarding process, onboarding verification, create organization, and an organization deletion process. With Edge, we have a concept of a planet which normally corresponds to a single hardware installation for a single purpose. Most commonly, we see separate planets for production and non-prod. Planets can span multiple data centers. Organizations can span the entire planet. Planets can also contain multiple organizations and organizations, in the case of edge, represent tenants. Each organization can also contain multiple environments. Organizations and environments represent strong conceptual boundaries. These boundaries allow for strong data, and in some cases, processing partitioning. When we come to name organizations, there are a number of rules that should be followed. With a single planets, you cannot create multiple organizations with the same name. An attempt to do so will result in the second organization failing to be created. Organization names should only be lowercase, spaces, underscores, periods, and special characters are not allowed. If multiple words are required in the name, then a dash can be used to join words. Usually, organizations are created as part of the onboarding process following a successful installation. This process is part of Edge's automation capabilities and is used to provision all the elements that make up a fully functional organization. Onboarding is performed using the setup-org function of the apigee service provisioning functionality. This command must be run on the Management Server. During the onboarding process, the script optionally creates a new user to function as the organization administrator, creates the organization, adds the specified user as the org admin. If user doesn't exist, the script will issue an error, it creates environments, will create a virtual host for that environment, associate the environment with all the message processes, and finally, enables analytics. Onscreen, we can see an example showing the typical onboarding process. Typically, an organization in the first environment for that organization that creates it together. To run onboarding, you would run apigee service, apigee-provision setup-org, and then specify the configuration file, describing the organization and environments. In the example, you can see we specify MSIP, which is the IP of the Management Server. We supply admin-email, and apigee-adminpw. These are the username and password for the Apigee sysadmin user that was created during the installation. You can and should create a separate user that becomes the organization administrator. After providing the username, email, name, et cetera, the next values are the organization and environment names. And finally, there are the details for the first environment. We give its name, the port to run on, the virtual hostname, and then one or more aliases the virtual host should respond on. Finally, we tell the script to provision across all message processes. It's possible to not use all message processes. This is useful if you have multiple environments have different SLAs or traffic requirements. You could, for instance, have a sandbox environment that is in the same organization as a production environment, but uses it's own set of message processes, thus limiting any impact, any traffic to that environment might have on production. Once onboarding is complete, you should verify completed successfully. Listing users. This should return the original sysadmin username, but also now the new organization admin username. List orgs. If this is the first organization you've created, then you will get a response with a single organization. If you're adding a new organization, then the new org should appear in the returned list. Describe org, this will return adjacent payload containing the creation and creator information, the name of the organization, and a list of any environments within that organization. The next command will again return adjacent payload that should show success messages for both Qpid, QS, and Postgres, ps components, along with the UUID for each service registered. Finally, you can use PSQL to check that the facts tables for the new organization and environment have been created in the PostgreSQL database. Of course, it is also possible to create an organization without using the automated provisioning process. As you can see, rather than running the apigee service, apigee-provision with a setup-org command, we instead, pass it create-org. Notice that response fall is much shorter. We only supply the sysadmin password, the new organization name, and the organization admin username. The org admin should already be created. As an alternative to either method described so far, you can also simply use the Management API. This is outside the scope of this video, but it's fully documented in the links provided on screen. Very occasionally, you may need to delete an organization. Before attempting this, you should fully understand what an organization represents in its entirety. An organization represents a tenant on Edge and implies a strong logical data and processing partitioning boundary, and is used by the Edge security model to control access to resources associated with the tenant it represents. Because of this, deleting an organization will not perform a cascading delete of all relationships and objects owned by that organization. Instead, before deleting the organization, you must disassociate or delete all related items and objects. There are minimum of six steps involved in fully deleting a functioning organization. In this example, we'll show the typical steps involved for an organization that has a single environment. If multiple environments have been created, then steps one to four that involve deleting items within that environment, would need repeating for each environment within the organization. First of all, any keystores defined in the environment should be deleted. This requires first, an API call to get a list of the keystores that have being defined. Once you have the list, a Management API call is made to delete each keystore. Next, we delete the virtual host for the environment. Again, we first make an API call to get a list of virtual hosts. The second API call to delete the virtual host would be repeated for each virtual hosts that exists. Next, we disassociate the servers with the environment. Again, first, we make a management API call to get a list of servers. Next, for each server in the list, we perform the API call shown, passing in the UUID, the region or data center name, and the pod name. Now, we've deleted all objects within the environment and disassociated all servers, we can delete the environment itself. As I said previously, if there are multiple environments within the organization, the previous steps would need repeating for each environment. Step five follows the same format as before. First, make an API call to get a list of pods associated with the organization, and then make subsequent call to remove the organization from each pod. Finally, with all objects, and servers, and associations removed, we can delete the organization itself. This concludes edge capacity expansion, create and delete an organization. For more information, you can visit docs.apigee.com, and to get involved in the community, please go to community.apigee.com. Thank you.
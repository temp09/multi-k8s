Hello, and welcome to the session on API monitoring. In this section, we will provide an overview of contextualize API monitoring. Monitoring the health of your API is key to a reliable and credible API program, is valuable for quickly identifying and resolving issues. We've already covered component and synthetic transaction monitoring in previous sessions. While those types of monitoring are vital, ultimately the function of an API platform is to service API requests within a defined service level agreement, also known as an SLA. API monitoring must be within the context of your SLA. Any successful monitoring strategy begins with understanding your SLA. When you begin thinking about how to monitor your APIs, you should begin by asking probing questions, about the depth of monitoring necessary, to prove your service level agreements. Is it enough to know that a service is up? Or must you also be able to prove that there are critical resources available? Can you monitor only the API endpoint proxy or to meet your SLA, should you also be monitoring the target endpoint? While, it is obvious, that you should be monitoring the production services, it is often, just as important to monitor other environments such as beta or development integration, as these environments can be mission critical to other groups. The main objectives of a successful monitoring strategy, rely on defining various requests and response patterns that touches many components as possible, and to define an external system or systems that can execute these tests consistently. The goal is to ensure, that each of the components function together as a whole, to successfully service requests within SLA, from your network location in your service area. General best practices are to identify small, inexpensive requests to real API resources that utilize multiple components. In this context, broad coverage is more valuable than deep coverage. Instead of accessing every API, target a subset that make use of Edge components and work towards complete coverage of your target backend systems. Be cautious to minimize potential exposure of customer data while still hitting real APIs, the target real backend systems. There are three common patterns found in successful monitoring programs. First, you can use a specialized sub resource to test network connectivity and deployment status. Second, a specialized resource that can be used to report status and access target backend systems health. Finally, you can use real API requests to known resources, with known states to check the health of the system and its ability to return a valid and correct response. If your API is protected by API keys, OAuth or some other authentication scheme, you might consider creating an application, solely for the purpose of monitoring. This will help you exclude monitoring calls from your analytics, when trying to understand traffic patterns and provide an easy dashboard for viewing health status. There are a large variety of tools that can help you monitor your API programs. The best tool is the one you already use in your organization. If you don't yet have a tool, Google offers Stackdriver. A Google cloud offering, that can help aggregate logs and create alerts. This concludes the section on API monitoring. For more information, you can visit docs.apigee.com. To get involved in the community, please register at community.apigee.com. Thank you.
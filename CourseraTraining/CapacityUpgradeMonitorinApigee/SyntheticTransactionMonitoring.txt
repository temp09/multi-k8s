Hello, and welcome to synthetic transactions monitoring. Monitoring individual components is required but not sufficient. The fact that each component may be up and running doesn't guarantee the system is working. In this lesson, we will discuss how to leverage synthetic transactions to enhance your monitoring. A synthetic transaction is a lightweight component that is used to test connectivity between elements, but does not change the state of any data or systems along the test path. Let's begin. Bring your focus to the critical path elements in a transaction cycle. Routers, message processors, and Cassandra are the Apigee components on the critical path. For the purposes of this lesson, consider synthetic transaction as an action executed over a resource with the goal of validating system runtime availability. Your monitoring strategy should consider executing synthetic transactions from both within your network and outside your network. Apigee Edge core functionality can be leveraged for synthetic transaction monitoring. An API proxy can be implemented to exercise specific actions on the system. Here, we illustrate an API flow that executes actions over routers and message processors. RMP actions are implemented as no target APIs. Using this approach allows us to validate availability and latency of Apigee routers and message processors without considering Cassandra or backend systems. On the second example, we illustrate an API curl that generates activities on routers, message processors, and Cassandra. RMPCS is implemented by leveraging Apigee quota policies and configuring those policies. The third example illustrates an API curl that passes through router and message processors before invoking the backend system. Please notice that the objective at this point in time is not to test every API or service offered by the backend system. Instead, the objective is to validate the message processor's ability to connect to the backend. Synthetic transaction monitoring complements component monitoring. It provides increased visibility and helps in issue identification. A heartbeat API proxy is available in the linked resources with additional documentation provided for this lesson. Feel free to customize it and make it your own. To use the heartbeat API proxy, you will need to import the API proxy, customize the API proxy implementation to use the virtual host available in your environment, create the target's server as described on the slide, and deploy the API proxy to your environment. The heartbeat API can be invoked as described on the slide. Ideally, these curls are automated and executed from within your monitoring infrastructure. You can ignore the payloads, focus on validating the HTTP 200 response code. This concludes synthetic transaction monitoring. For more information, you can visit docs.apigee.com. To get involved in the community, please go to community.apigee.com. Thank you.
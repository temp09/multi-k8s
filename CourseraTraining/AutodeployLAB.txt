In this lab you created a deployment
manager configuration and template to automate the deployment
of GCP infrastructure. Templates can be very flexible because of
their environment and template variables. Therefore, the benefit of creating
templates is that they can be reused across many configurations. You can use the template that you
created as a starting point for future deployments. You can stay for lab walkthrough. But remember,
the GCP's user interface can change, so your environment might
look slightly different. So here I am in the GCP console. And the first thing I want to do is I
want to verify that the deployment manager API is enabled. I can check that by going to the
navigation menu, going to APIs & Services, and Library. And in here I'm going to search for
deployment manager. I'm looking for
this one right here V2 API. and I'm going to be looking at the status. And it says that the API is enabled. If it wasn't, there would be an enable
button here, and then you could do that. Now, we're going to be using Cloud Shell. I want to go ahead and
activate Cloud Shell, click up here. It's a new project, so I'm going to
have to click START CLOUD SHELL. And the first thing I'm going to do is
I'm going to just going to create us some folders in here. I'm just going to create a directory, and
we're going to navigate to that directory. So let me do that. And then I'm going to
launch the code editor. You can access that with the pencil icon
over here, so you can launch code editor. And this is going to make it much
more interactive for us to write our configurations and templates within here,
because we can actually see the files. Rather than using Nano and
going back and forth between files, we just get a UI to write code. And we still get the Cloud Shell
command line below. So we can still interface with that, which
we're going to to actually deploy this. So let me go click on the dminfra folder. This is the one I just created. And we're going to be
creating files in here now. And the first of all I'm going to
create is a configuration. And that's going to be a YAML file. So let me right-click on dminfra,
click New File, provide a name, click OK. I can dismiss this window up here for now. And there's some base code in here that we
are going to paste in to get us started. So all configurations always
start with resources colon. And then you provide all of
the different resource,s anything that starts with the pound
here is just a comment. You can see that in green. And that's again, why it's really
useful to use the Cloud Shell editor, is that we get all of
this color coding also. Now, indentation is
very important in YAML. You can see this actually here,
that everything is indented. And I'll call this out couple more
times as we work through this. Now, the first thing I want to
do is I just want to change the name of the resource. So I'm just going to call this my network. And I also want to change the type. But I now need to kind of look up
what I'm trying to create here. I know I want to create a network. But if I'm new to this,
I may not know what that type is called. So I can use the command line and
run the command gcloud deployment manager types list, and
specifically look for the word network. And when I do that, I'll see that there is one type that is called
compute v1 network. So let me go grab that, and
I can paste that in there. There are also sub-networks,
there are alphas and betas. V1 is essentially the ga,
the general available version. There's also a link in the lab that links
to the documentation where you can also look up all those types. If you don't want to look them
up through the command line. Now any resource has always a name and
a type. You can also have properties,
those are optional for some. But in the case of a network,
this is required. Specifically, I need to define if
the network is an auto network or a custom network. And for that we're going to now
paste from the lab instructions. I'm going to replace resources. I'm going to put in here auto
create subnetworks true. So this makes this an auto mode network, which I've already put
in here as a comment. But this is really what sets that. If I had a custom mode network,
then I would also have to create subnets. In this case that is done for me. So sub networks are automatically created. Now, the lab gives me a snippet
of what they should look like. And it's always good to kind
of just double check to make sure that you have everything
formatted and indented the right way. We're ready to go, we can hit Save. And then we can go on to
configuring the firewall rules. Because I'm going to be
putting instances on here. And for there to be ingress traffic,
I need to have some firewall rules. So let me copy the base code that we have
for that as well, just paste it below. And I can move the comment here. But again,
you can see that this indentation is key. So what I've done is I've
already populated the name. The important thing is we now
need to also look up the type. So we could use the documentation or we
could use the command line to look through the types and specifically look for
the word firewall. And I can see here compute v1 firewall. So I can grab that and
replace that in the type. Now, what's important with any
firewall rule is to define properties. And if you think of firewall rules, the most important properties
that we need are the network, the source IP ranges, and the protocol and
port combinations that are allowed. So I'm going to copy from the instructions
the properties that we have to get us started. And in there we have the network, and
let me indent all of this as well. It's telling me that it's bad indentation, so might have to clean
things up a little bit. Can be a little bit of
a struggle sometimes. I will see you in a second if that works. If not, we'll refer to the lab. So first things first,
we have the network. Now, this is new,
you haven't seen this yet in this lab. This is a reference. Because the firewall rule
depends on the network, you're using this reference
to instruct deployment manager that it needs to resolve these
two resources in a dependent order. Specifically the network needs to
be created before you can create the firewall rule. because that's true If you even
did this through the console, you can't create a firewall rule for
a network that doesn't exist. By default, deployment manager will
create all resources in parallel. So it's really important that we don't
just define the name of the network here, but we reference the name of the network. We also then have the source IP ranges. Here we're allowing traffic from anywhere. And then we have the combinations
of allowed protocols and ports. We allowed TCP on 2280 and 3389. So that's SSH, HTTP, and
RDP, and then we allow ICMP. And then it's asking us again to
verify that our YAML looks correct. And I think I have some of these items
just indented a little bit too far. So I can just pull back allowed here and also IP protocol. Or I could just go and copy and
paste, which I might do in a second. And pull this one back too. So now you can see that
all of that is resolved. I can also just now
paste it on top of here. We see it just moved
everything back a little bit. But the overall rules of indentation
of really important here with deployment manager. So let me go ahead and save that. And we'll move on to now create
a template for VM instances. So I could directly write the VM
instances as resources in here. But I'm going to be creating
several VM instances. So what's important is
that if you do that, you might want to think
about creating a template. So that you can reuse it
across many configurations. And you just have to decide
what is sort of standard. What can you sort of hard code into
your template versus what are you going to be able to control
through variables, essentially? And we'll see how that's done in a second. So let's go ahead and create a new file. And in this case, we're going to be
creating new file, a Ginga file. You can also create these in Python. And within here,
I'm going to start by copying, again, the base code that we had earlier. So very similar, the name,
type, and properties. And what I'm going to do now is I'm
going to be using environment variables. So instead of just giving it a name and
hard-coding that, I'm going to be giving it
an environment variable. And this is going to be
provided by the configuration. So I'm going to use that
in the configuration later. And that way I can reuse this and create
several VM instances with different names. Now, I also need the type. This we're going to
write into the template. But I need to know what the type is. So again, I can run a command for
that to list the type. And if I look through here,
I should find compute v1 instance. That is, let's see, right here. It's a long list, and
I can replace it in here. Now, I'm also going to need
the instance properties. And here we're going to have to
define quite a lot of properties. We need to think about the machine type,
the zone, network interfaces, disks,
all of that needs to be defined. So let me go ahead and
copy the code that we have in the module and replace resources. Let me replace these properties here. So you can see I have the machine type. In that I am getting the zone
through property zone. So I'm going to have to
define that zone elsewhere. I also have the network. So I'm going to be getting that
from the configuration as well, as well as the subnetwork. Now, down here the accessConfigs
by just a defining name, External NAT, type ONE_TO_ONE_NAT. This is going to ensure that
there is a public IP address or an external IP address. And then disks, device name, I'm going to
give the disk the same name as the VM. That's pretty typical for
a boot disk, that is of type Boot. And I define a source image for that. So now I can verify again
that my template looks exactly like the lab instructions,
and it does. So let's go ahead and save that. And now I'm ready to deploy
the configuration, well, almost. In my configuration,
I haven't actually specified anything yet about how I want to use this template. So first things first,
I need to actually import this template. So before resources, I'm just going to
add that it should import this file so that it knows that it
needs to use that file. And then I need to actually
configure my instances. So within resources now,
I'm going to create two VM instances. So I I'm copying that from
the lab instructions. I have a name. Now, the type is the template file. And then I define the property. So the name here links then to
this environment variable name, both for the instance and the boot disk. And then I define the properties, zone,
machine type, network, subnetwork. And we can see that those
are the different properties that we had defined here. So they get passed to that template. Now, important again, I'm using the self
link reference for the network. Because I also cannot create any instances
without first creating the network. So I'm being very specific here, and I can add a similar machine
in a different zone. And now, essentially, rather than
having to write all of this code that I have in here in my template
in here twice, I can reuse it. I could create tons of
different machines now. And I can reuse this template for
tons of different configurations. So this really just provides
you a lot of flexibility. So let me go ahead and save that. And now we're going to actually
deploy the configuration. I'm going to clear the shell over here. And we're going to run
the command now to deploy. And you'll see that the command is gcloud
deployment manager deployments create. This is the action,
then I give the deployment and name. I leveraged that configuration file, and I'm actually going to start
by just previewing it. So let me hit that. And it's now looking into this. The preview flag just gives you a preview
of how your configuration's applied before creating it. And it actually causes deployment manager
to start creating your deployment, but then just stops right before
creating any resources. So here we can it see would
create two instances, a network and a firewall rule. So now if I run the update command,
it actually commits this preview. And if you hadn't run the preview, you
could've just directly run this command without the preview,
that would've also created it. But this kind of lets you, again,
preview with sort of a dry run. So that you understand what the different
resources are that are going to be created. Now, we're going to wait for
this to complete, and then we're going to come back and
verify this deployment. So here we can see that all of
the resources were created, at least that's shown
to us in cloud shell. We can actually also go
to the GCP console, and you could do this while all
of this is being deployed. So if I switch tabs here,
go to the GCP console and scroll down to find deployment
manager within the navigation menu right here,
I will see my deployment in here. I should be looking for dminfra,
you can see it's completed. And if I click on it, I see all of the different
resources that are being created. So you could watch this while
this configuration is deployed. And then you can click on here and
see all of the different properties, and types, and
names that you have defined. Now, you can also see
the actual files that you have, the configuration as well
as the imported files. Now, if anything goes wrong while you are
deploying, you will get error messages. I recommend you use those
to troubleshoot the issue. And then if you want to redeploy, you're
going to have to delete the deployment. You could do that either right here
by clicking the delete button. Or from Cloud Shell, you can run the delete command that's
provided in the lab instructions. And if you really can't troubleshoot
the issue, I recommend you take a look at the finished configuration and
template that we provided. And kind of just compare and contrast
what's different to your configuration. Now, we've created all the resources, but
let's verify that they're actually there. So I'm going to go navigate and
verify that I have this network, this firewall rule, and
these two instances. So if I go to the navigation menu and
then VPC Network, you'll see that I have the my network,
the default that was already there. And then if I click on Firewall rules, you can see the new firewall
rule that I've added. I can also navigate to compute engine. And we should see the two instances,
mynet.uvm and mynet.usvm. And since they're both in the same
network, I should be able, given the firewall rules that I created, to now ping these instances on
their internal IP addresses. So let me grab mynet.uvm's
internal IP address. Let me SSH to mynet.usvm. And that's the last thing we'll do just
to verify that these are on the same network and that I have
established these firewall rules. And we can see that that works. So that's the end of the lab.
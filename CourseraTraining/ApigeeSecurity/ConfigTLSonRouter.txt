Hello and welcome to configuring TLS on an Edge router. In this video, we will cover the following topics: a brief overview and description of how TLS is implemented with respect to Edge routers, creating the keystore JAR file, creating and uploading the keystore, creating a new secure virtual host. In many installations, TLS encryption is terminated on a load balancer closest to the data center boundary. This typically has the advantage of providing a single place to manage all certificates. However, in Edge, you can configure the router component for TLS. To do this, for each environment you wish to secure, you create a new secure virtual host that is configured to accept encrypted connections. TLS keys and certificates are stored in keystores and managed via the management API. The keys and certificates are first bundled into a specially formatted JAR file and then uploaded to Edge using the management API. Once in place, the keystore can be referenced when creating new virtual host definitions. To create the JAR file, you need the following: a certificate, or a full certificate chain if you're including the CA or intermediate CA. In this example, myCert.pem. And the private key. In this example again, myKey.pem. Lastly, a manifest file. For this, create the META-INF directory and touch a file named descriptor.properties. To package the JAR, you follow a two-step process. First, add the certificates using the JAR command. Here, we use JAR minus CF, create with these files, and include the name of the certificate and a private key files. Next, we update the JAR, this time add in the manifest. JAR minus UF, update with the files, and provide the path to the descriptor.properties file. At this stage, your keystore JAR is complete and ready to be uploaded. It's worth noting at this stage that you can only have one certificate per keystore. To create the keystore, we make a management API curl as shown on the screen. The curl is a post because we're creating something new, and it takes some xml strings, it's payload contained in the keystone name. You can see that the curl is made, and it references the organization name and environment name the keystore should be created for. Once the keystore is created, they can be populated by uploading the JAR you created in the previous step. Again, we make a post to the management API, uploading the JAR file to the keystore path. Additionally, arguments are also supplied to specify an alias for the keystore. This is used when creating the skilled virtual host and a password, if one was used when you created the private key. With the keystore in place, it is simply added to the configuration when creating a new secure virtual host. Another management API curl is made. And looking at the xml payload, we can see that we are creating a new virtual host. The virtual host will answer on https://tlsdemo.training.apigee.com. The listen port has been set to 9443. SSL has been enabled. And the keystore has been set to myTestKeystore. The alias has been set to myKeyAlias. At this point, the virtual host will be created and the new configurations push that to the Edge routers. This concludes TLS for Edge routers. For more information, you can visit docs.apigee.com. And to get involved in the community, please go to community.apigee.com. Thank you.
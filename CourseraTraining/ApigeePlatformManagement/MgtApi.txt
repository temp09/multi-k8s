Hello and welcome to the Management API
lesson of the Edge Management topic. Today, we'll be talking about
the management API, a key tool for managing Apigee Edge. In this lesson, we'll cover an overview of
the management API, management API basics, supported resources, and finally tools
that you can use to interact with the API Edge, provides management
interfaces based on REST APIs. Each server level API provides basic
functions related to the service status and operation. On-screen, we can see the message
processor exposes interfaces, the reports on its health as
well as run time metrics. The management server, however,
exposes a centralized, unified API called the management API. The management API governs a wide
variety of functions on Edge. There are simple operations such as
deploying proxies and reporting. It can also be used for
operations such as adding and removing capacity from a given
pod environment or organization. The API itself supports JSON and XML and
is secured for HTTP basic authentication. Documentation for
the management API can be found at docs.apigee.com/management/apis. Additional APIs are also described
in the private cloud install and configuration guide As well
as in the operations guide. All the operations performed in
the enterprise UI are powered by calls to the management API, with all data
being served by the management server. The installation and upgrade process, as well as management
scripts, also make use of the API. Management API Basics. As we can see on screen, the general structure of the management
API takes the form /V1 followed by a named resource followed by an ID followed by an
optional number of attribute value pairs. Some examples might be /V1/organizations. This returns a simple adjacent structure
containing a list of organizations. If we then specify an organization name, we see a return payload that
describes that organization. If we add environments after
the organization name, then we see a list of environments. Again, if we want to see more detail
about the specific environment, we can just add the environment
name to the end of the URL. The final example shows filtering
lists of servers using attribute and valued pairs as filters. Here you can see the breadth of resources
that could be managed using the management API. Everything from the infrastructure
to the proxies and all their dependencies can be
managed completely via APIs. For more information, there is a detailed
API reference at the URL shown. At Apigee, we've developed an opened
sourced a number of tools and wrappers for the management API. These tools allow you to more
easily execute common actions, such as the deployment or undeployment of API proxies, using tools
that you may be more familiar with. First up is the Apigee Management
API Postman collection. If you already use Postman, then this collection covers a large
number of commonly used API calls. If Node JS is your preferred choice then
the Apigee node tool is probably for you. This is an npm install module that amongst
other things covers proxy management, listing, deploying, undeploying, etc. KVM and cache management and
API products and developer management. Finally, if you use Maven
in your CICD process, then you'll be pleased to know
we also offer a Maven plugin. The plugin assists with creating and
managing Apigee conflicts such as cache, KVM, target server,
resource files, API products, developers and developer apps And
flow hooks and mass configuration. This concludes the subject. For more information,
please visit docs.apigee.com. Or get involved in the community
at community.apigee.com. Thank you.
Next, let's talk about VPC network peering and how it is different from shared VPC. VPC network peering allows private RSC 1918 connectivity across two VPC networks, regardless of whether they belong to the same project or the same organization. Now, remember that each VPC network will have firewall rules that define what traffic is allowed or denied between the networks. For example, in this diagram there are two organizations that represent a consumer and a producer respectively. Each organization has its own organization node, VPC network, VM instances, network admins and instance admins. In order for VPC network peering to be established successfully, the producer network admin needs to peer the producer network with the consumer network. The consumer network admin needs to peer the consumer network with the producer network. When both peer connections are created, DVPC network peer institutions become active and routes are exchanged. This allows the VM instances to communicate privately using their internal IP addresses. VPC network peering is a decentralized, or distributed approach to multi-project networking. Because each VPC network will remain under the control of separate administrator groups and maintains its own global firewall and routing tables. Historically, such projects would consider external IP addresses or VPNs to facilitate private communication between VPC networks. However, VPC network peering does not incur the network latency, security, and cost drawbacks that are present when using external IP addresses or VPNs. Now, there are some things that I want you to remember when using VPC network peering. First of all, VPC network peering worked with compute engine, Kubernetes engine, and App Engine flexible environments. Next, the peered VPC networks remain administratively separate. This means that routes, firewalls, VPNs, and other traffic management tools are administered and apply separately, in each of the VPC networks. Also, each side of a peering association is set up independently. Peering will be active only when the configuration from both side matches. This allows either side to delete the peering association at anytime. Remember that a subnet setter prefix and one peered VPC network, cannot overlap with a subnet setter prefix in another peer network. This means that two auto mode VPC networks that only have the default subnets cannot peer. Finally, only directly peered networks can communicate. Meaning that transitive peering is not supported. In other words, if VPC network, N_1 is paired with N_2 and N_3, but N_2 and three are not directly connected, then VPC network two cannot communicate with VPC network N_3 over peering. This critical if N_1 is a SAS organization, offering services to N_2 and N_3. Now that we've talked about shared VPC and VPC network peering, let me compare both of these configurations to help you decide which is appropriate for a given situation. If you want to configure private communication between VPC networks in different organizations, you have to use VPC network peering. Shared VPC only works within the same organization. Somewhat similarly, if you want to configure private communication between VPC networks in the same project, you have to use VPC network peering. This doesn't mean that networks need to be in the same project but they can be as you will explore in the upcoming lag. Shared VPC on the other hand, only works across projects. In my opinion, the biggest difference between the two configurations is the network administration models. Shared VPC is a centralized approach to multiproject networking, because security, and network policy occurs in a single designated VPC network. In contrast, VPC network peering is a decentralized approach, because each of the VPC networks can remain under the control of separate administrator groups, and maintains its own global firewall and routing tables. Now that we've compared both of these configurations for sharing VPC networks across GCP projects, let's look at one last use case. In GCP, you can peer with a shared VPC. Let me explain this by first focusing on the left-hand side of this diagram. The network as VPC is a shared VPC network in host project P_1. Service projects P_3 and P_4 are able to touch VM instances to network as VPC enabling private communication between VMs. If we now establish a peering session between network A and network SVPC. All of the instances will have private internal IP connectivity. Again, remember that each VPC network will have firewall rules that define what traffic is allowed or denied between the network. It is even possible to set up VPC network peering between two shared VPC networks.